
# EFN-b0

# valがすぐ頭打ちになる
train_sizeを調整する
python train.py -exp efn_b0_simple_01 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100
LB 0.63


albuを増やす
python train.py -exp efn_b0_simple_02 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100
LB: 0.59



tileを使って12つの画像を結合させたものをインプットとする
横4縦3枚でconcatして結合させた
tiff_level=-1
python train.py -exp efn_b0_simple_03 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 --tile
LB: 0.64


上と同じ内容　tileのサイズを調整する
tileのサイズをimg_sizeの半分にすることでひとつひとつのタイルの情報を多くする
tiff_level=-1
python train.py -exp efn_b0_simple_04 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 112 -epoch 100 -img_n 12 --tile
LB: 0.67


タイルのサイズを1/3(75)にして同様に実行
python train.py -exp efn_b0_simple_05 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 12 --tile
LB: 0.70  0.75


タイルのサイズを1/2 (4, 3)
バッチサイズを増やしてみる
python train.py -exp efn_b0_simple_06 -model b0 -trn_s 0.8 -bs 64 -lr 0.001 -ims 224 -t_ims 112 -epoch 100 -img_n 12 --tile


タイルを(4, 4)で結合する
python train.py -exp efn_b0_simple_07 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 112 -epoch 100 -img_n 16 --tile
LB: 0.61

タイルのサイズを1/2 (4, 4)
バッチサイズを増やしてみる
python train.py -exp efn_b0_simple_08 -model b0 -trn_s 0.8 -bs 32 -lr 0.001 -ims 224 -t_ims 112 -epoch 100 -img_n 16 --tile
途中で打ち切り


タイルを(4, 4)で結合する
タイルサイズを1/3(75)とする
python train.py -exp efn_b0_simple_09 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 16 --tile
LB: 0.64
タイル枚数は12の方がいいのかも
ただtiffの解像度を上げればいいかもしれん


simple_05と同じ条件でaugmentを変える
ImageTransform_2
python train.py -exp efn_b0_simple_10 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 12 --tile
LB: 0.76


ImageTransform_2
image_size, tile_image_sizeを変更
python train.py -exp efn_b0_simple_11 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 256 -t_ims 128 -epoch 100 -img_n 12 --tile
efn_b0_simple_10とあんま変わんなさそう
LB: 0.75


efn_b0_simple_10と同じ設定
batch_multipiler=5としてbatch_size * 5ごとにパラメータを更新するように設定
python train.py -exp efn_b0_simple_12 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 12 -sch step --tile
LB: 0.72


# EFN-b2  ####################################################
ImageTransform_2
python train.py -exp efn_b2_simple_01 -model b2 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 12 --tile
CV: 0.731  LB: 0.74


# EFN_b4  ####################################################
現時点で最も精度が高いefn_b0_simple_10の内容でモデルだけ変える
ImageTransform_2
python train.py -exp efn_b4_simple_01 -model b4 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -t_ims 75 -epoch 100 -img_n 12 --tile
LB: 0.76
モデルを変えてもあまり伸びない



# fromjpg  ####################################################

# EFN-b0  ####################################################
# jpgから読み込んだ画像（tiff_level_1）をベースに学習
学習画像はimg_num * 1.5から学習の度にランダムで選択するようにする
→うまく学習されないっぽい
python train_fromjpg.py -exp efn_b0_fromjpg_01 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 16 -sch none


学習と推論どちらもimg_num分の画像をピックアップするようにする（学習時にランダムで選ばない）
batch_multiplier=1
python train_fromjpg.py -exp efn_b0_fromjpg_02 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 16 -sch none


background_rate=0.2にした画像で同じように学習
batch_multiplier=1
python train_fromjpg.py -exp efn_b0_fromjpg_03 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 16 -sch none
LB=0.70


background_rate=0.7の画像でimage_size, tile_numを増やしてみる
batch_multiplier=5
python train_fromjpg.py -exp efn_b0_fromjpg_04 -model b0 -trn_s 0.8 -bs 4 -lr 0.001 -ims 512 -epoch 100 -img_n 36 -sch none



background_rate=0.2にした画像で同じように学習
schedularを設定
batch_multiplier=1
python train_fromjpg.py -exp efn_b0_fromjpg_05 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 16 -sch step

# tile_numを増加
# Background_rate=0.7
# (6, 6)の画像
python train_fromjpg.py -exp efn_b0_fromjpg_06 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 200 -img_n 36 -sch step


python train_fromjpg.py -exp efn_b0_fromjpg_07 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 12 -sch step



# fromjpg_06と同じ条件
# stratifiedKFoldを適用
# Background_rate=0.7
# ImageTransform(Flip, transposeのみ)
python train_fromjpg.py -exp efn_b0_fromjpg_08 -model b0 -trn_s 0.8 -bs 16 -lr 0.001 -ims 224 -epoch 100 -img_n 36 -sch step


# stratifiedKFoldを適用
# Background_rate=0.7
# ImageTransform(Flip, transposeのみ)
python train_fromjpg.py -exp efn_b0_fromjpg_09 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2


# efn_b0_fromjpg_09_epoch_5_loss_0.825_kappa_0.783.pthを最初の重みとして学習
# foldを変える
python train_fromjpg.py -exp efn_b0_fromjpg_09_01 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2
LB: 0.83

python train_fromjpg.py -exp efn_b0_fromjpg_09_02 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2
LB: 0.83




# img_sizeを大きくする
# 全データ
python train_fromjpg.py -exp efn_b0_fromjpg_10 -model b0 -trn_s 0.8 -bs 8 -lr 0.0003 -ims 650 -epoch 100 -img_n 36 -sch cos_2



# Modify_trainを使用  ###########################################################

# modify_ver1を使用
python train_fromjpg.py -exp efn_b0_fromjpg_modify_01 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2


# efn_b0_fromjpg_modify_01_epoch_12_loss_0.866_kappa_0.776.pthを最初の重みとして学習
python train_fromjpg.py -exp efn_b0_fromjpg_modify_01_01 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 50 -img_n 36 -sch cos_2 -fold 1
LB 0.84


# modify_ver2を使用
# まだ学習途中！
python train_fromjpg.py -exp efn_b0_fromjpg_modify_02 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2 -fold 0


# modify_ver2を使用
# Cutoutを導入
# まだ学習途中！
python train_fromjpg.py -exp efn_b0_fromjpg_modify_03 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2 -fold 0


# efn_b0_fromjpg_modify_03_epoch_6_loss_0.880_kappa_0.776.pthを用いて再学習
python train_fromjpg.py -exp efn_b0_fromjpg_modify_03_01 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2 -fold 1

python train_fromjpg.py -exp efn_b0_fromjpg_modify_03_02 -model b0 -trn_s 0.8 -bs 8 -lr 0.00005 -ims 600 -epoch 100 -img_n 36 -sch cos_2 -fold 2



# foldをランダムに選択してすべてのfoldで学習できるようにする
# label ver2
# cutout込
python train_fromjpg.py -exp efn_b0_fromjpg_multifold_01 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2
LB: 0.80


# foldをランダムに選択してすべてのfoldで学習できるようにする
# labelは元のものを使用
# cutout込
python train_fromjpg.py -exp efn_b0_fromjpg_multifold_02 -model b0 -trn_s 0.8 -bs 8 -lr 0.0001 -ims 600 -epoch 100 -img_n 36 -sch cos_2
LB: 0.79  Cutoutがだめなのかも。。


# foldをランダムに選択してすべてのfoldで学習できるようにする
# labelは修正版ver2
# cutoutは用いない
python train_fromjpg.py -exp efn_b0_fromjpg_multifold_03 -model b0 -trn_s 0.8 -bs 8 -lr 0.0003 -ims 600 -epoch 100 -img_n 36 -sch cos_2
LB: 0.82
Cutoutはないほうがよさそう



# foldをランダムに選択してすべてのfoldで学習できるようにする
# labelは修正版ver2
# cutoutは用いない
# lossをQWKlossでやってみる
python train_fromjpg.py -exp efn_b0_fromjpg_multifold_04 -model b0 -trn_s 0.8 -bs 8 -lr 0.0003 -ims 600 -epoch 100 -img_n 36 -sch cos_2



# タイルごとにaugmentを行うようにする(train_fromjpg_2.py)
# 学習する画像サイズはims * np.sqrt(img_n) = 224 * 4 = 896
# foldは固定
# labelは修正版ver.2
# cutoutは使わない
python train_fromjpg_2.py -exp efn_b0_fromjpg_augtile_01 -model b0 -trn_s 0.8 -bs 4 -lr 0.0003 -ims 224 -epoch 100 -img_n 16 -sch cos_2 -fold 0



# タイルごとにaugmentを行うようにする(train_fromjpg_2.py)
# 学習する画像サイズはims * np.sqrt(img_n) = 128 * 6 = 768
# foldは固定
# labelは修正版ver.2
# cutoutは使わない
python train_fromjpg_2.py -exp efn_b0_fromjpg_augtile_02 -model b0 -trn_s 0.8 -bs 6 -lr 0.0003 -ims 128 -epoch 100 -img_n 36 -sch cos_2 -fold 0
# うまく学習できていない(lossが増加しちゃう)


# 上と条件は同じで学習済み重みは使わないでやってみる
python train_fromjpg_2.py -exp efn_b0_fromjpg_augtile_03 -model b0 -trn_s 0.8 -bs 6 -lr 0.0005 -ims 128 -epoch 100 -img_n 36 -sch cos_2 -fold 0
# 時間がかかるし精度も上がらない。。128×128だとうまくいかないかも


256でやってみる
# model_2を使用
# タイル結合後に前処理
# fold0だけで学習
python train_fromjpg.py -exp efn_b0_fromjpg_augtile_04 -model b0 -trn_s 0.8 -bs 8 -lr 0.0005 -ims 256 -epoch 100 -img_n 36 -sch cos_2 -fold 0




# trainerを変えて同じように実施
# Model_2を使用
# normalizeではなく255で割る正規化をやってみる
python train.py -exp efn_b0_256_fold_0 -model b0 -trn_s 0.8 -bs 2 -lr 0.0003 -ims 256 -epoch 30 -img_n 25 -sch cos_2 -fold 0





python train.py data.exp=efn_b0_256_fold_0

python train.py data.exp=efn_b0_256_fold_1 training.fold=1